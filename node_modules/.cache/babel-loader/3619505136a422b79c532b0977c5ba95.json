{"ast":null,"code":"import _regeneratorRuntime from\"/Users/uchennaibe/Desktop/youtube/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/uchennaibe/Desktop/youtube/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import firebase from'firebase/app';import auth from'../../firebase';import{LOAD_PROFILE,LOGIN_FAIL,LOGIN_REQUEST,LOGIN_SUCCESS,LOG_OUT}from'../actionType';export var login=function login(){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var provider,res,accessToken,profile;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;dispatch({type:LOGIN_REQUEST});provider=new firebase.auth.GoogleAuthProvider();provider.addScope('https://www.googleapis.com/auth/youtube.force-ssl');_context.next=6;return auth.signInWithPopup(provider);case 6:res=_context.sent;accessToken=res.credential.accessToken;profile={name:res.additionalUserInfo.profile.name,photoURL:res.additionalUserInfo.profile.picture};sessionStorage.setItem('ytc-access-token',accessToken);sessionStorage.setItem('ytc-user',JSON.stringify(profile));dispatch({type:LOGIN_SUCCESS,payload:accessToken});dispatch({type:LOAD_PROFILE,payload:profile});_context.next=19;break;case 15:_context.prev=15;_context.t0=_context[\"catch\"](0);console.log(_context.t0.message);dispatch({type:LOGIN_FAIL,payload:_context.t0.message});case 19:case\"end\":return _context.stop();}}},_callee,null,[[0,15]]);}));return function(_x){return _ref.apply(this,arguments);};}();};export var log_out=function log_out(){return/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return auth.signOut();case 2:dispatch({type:LOG_OUT});sessionStorage.removeItem('ytc-access-token');sessionStorage.removeItem('ytc-user');case 5:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x2){return _ref2.apply(this,arguments);};}();};","map":{"version":3,"sources":["/Users/uchennaibe/Desktop/youtube/src/redux/actions/auth.action.js"],"names":["firebase","auth","LOAD_PROFILE","LOGIN_FAIL","LOGIN_REQUEST","LOGIN_SUCCESS","LOG_OUT","login","dispatch","type","provider","GoogleAuthProvider","addScope","signInWithPopup","res","accessToken","credential","profile","name","additionalUserInfo","photoURL","picture","sessionStorage","setItem","JSON","stringify","payload","console","log","message","log_out","signOut","removeItem"],"mappings":"6SAAA,MAAOA,CAAAA,QAAP,KAAqB,cAArB,CAEA,MAAOC,CAAAA,IAAP,KAAiB,gBAAjB,CACA,OACGC,YADH,CAEGC,UAFH,CAGGC,aAHH,CAIGC,aAJH,CAKGC,OALH,KAMO,eANP,CAQA,MAAO,IAAMC,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,kGAAM,iBAAMC,QAAN,uKAErBA,QAAQ,CAAC,CACNC,IAAI,CAAEL,aADA,CAAD,CAAR,CAIMM,QANe,CAMJ,GAAIV,CAAAA,QAAQ,CAACC,IAAT,CAAcU,kBAAlB,EANI,CAOrBD,QAAQ,CAACE,QAAT,CAAkB,mDAAlB,EAPqB,sBASHX,CAAAA,IAAI,CAACY,eAAL,CAAqBH,QAArB,CATG,QASfI,GATe,eAUfC,WAVe,CAUDD,GAAG,CAACE,UAAJ,CAAeD,WAVd,CAYfE,OAZe,CAYL,CACbC,IAAI,CAAEJ,GAAG,CAACK,kBAAJ,CAAuBF,OAAvB,CAA+BC,IADxB,CAEbE,QAAQ,CAAEN,GAAG,CAACK,kBAAJ,CAAuBF,OAAvB,CAA+BI,OAF5B,CAZK,CAiBrBC,cAAc,CAACC,OAAf,CAAuB,kBAAvB,CAA2CR,WAA3C,EACAO,cAAc,CAACC,OAAf,CAAuB,UAAvB,CAAmCC,IAAI,CAACC,SAAL,CAAeR,OAAf,CAAnC,EAEAT,QAAQ,CAAC,CACNC,IAAI,CAAEJ,aADA,CAENqB,OAAO,CAAEX,WAFH,CAAD,CAAR,CAIAP,QAAQ,CAAC,CACNC,IAAI,CAAEP,YADA,CAENwB,OAAO,CAAET,OAFH,CAAD,CAAR,CAxBqB,iFA6BrBU,OAAO,CAACC,GAAR,CAAY,YAAMC,OAAlB,EACArB,QAAQ,CAAC,CACNC,IAAI,CAAEN,UADA,CAENuB,OAAO,CAAE,YAAMG,OAFT,CAAD,CAAR,CA9BqB,qEAAN,gEAAd,CAqCP,MAAO,IAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,mGAAM,kBAAMtB,QAAN,6IACpBP,CAAAA,IAAI,CAAC8B,OAAL,EADoB,QAE1BvB,QAAQ,CAAC,CACNC,IAAI,CAAEH,OADA,CAAD,CAAR,CAIAgB,cAAc,CAACU,UAAf,CAA0B,kBAA1B,EACAV,cAAc,CAACU,UAAf,CAA0B,UAA1B,EAP0B,wDAAN,kEAAhB","sourcesContent":["import firebase from 'firebase/app'\n\nimport auth from '../../firebase'\nimport {\n   LOAD_PROFILE,\n   LOGIN_FAIL,\n   LOGIN_REQUEST,\n   LOGIN_SUCCESS,\n   LOG_OUT,\n} from '../actionType'\n\nexport const login = () => async dispatch => {\n   try {\n      dispatch({\n         type: LOGIN_REQUEST,\n      })\n\n      const provider = new firebase.auth.GoogleAuthProvider()\n      provider.addScope('https://www.googleapis.com/auth/youtube.force-ssl')\n\n      const res = await auth.signInWithPopup(provider)\n      const accessToken = res.credential.accessToken\n\n      const profile = {\n         name: res.additionalUserInfo.profile.name,\n         photoURL: res.additionalUserInfo.profile.picture,\n      }\n\n      sessionStorage.setItem('ytc-access-token', accessToken)\n      sessionStorage.setItem('ytc-user', JSON.stringify(profile))\n\n      dispatch({\n         type: LOGIN_SUCCESS,\n         payload: accessToken,\n      })\n      dispatch({\n         type: LOAD_PROFILE,\n         payload: profile,\n      })\n   } catch (error) {\n      console.log(error.message)\n      dispatch({\n         type: LOGIN_FAIL,\n         payload: error.message,\n      })\n   }\n}\n\nexport const log_out = () => async dispatch => {\n   await auth.signOut()\n   dispatch({\n      type: LOG_OUT,\n   })\n\n   sessionStorage.removeItem('ytc-access-token')\n   sessionStorage.removeItem('ytc-user')\n}\n"]},"metadata":{},"sourceType":"module"}