{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/uchennaibe/Desktop/youtube/src/screens/subscriptionsScreen/SubscriptionsScreen.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport { Container } from 'react-bootstrap';\nimport Skeleton, { SkeletonTheme } from 'react-loading-skeleton';\nimport { useDispatch, useSelector } from 'react-redux';\nimport VideoHorizontal from '../../components/videoHorizontal/VideoHorizontal';\nimport { getSubscribedChannels } from '../../redux/actions/videos.action';\nimport './subscriptions.scss';\n\nconst SubscriptionsScreen = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getSubscribedChannels());\n  }, [dispatch]);\n  const {\n    loading,\n    videos\n  } = useSelector(state => state.subscriptionsChannel);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    fluid: true,\n    children: !loading ? videos === null || videos === void 0 ? void 0 : videos.map(video => /*#__PURE__*/_jsxDEV(VideoHorizontal, {\n      video: video,\n      subScreen: true\n    }, video.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 16\n    }, this)) : /*#__PURE__*/_jsxDEV(SkeletonTheme, {\n      color: \"#343a40\",\n      highlightColor: \"#3c4147\",\n      children: /*#__PURE__*/_jsxDEV(Skeleton, {\n        width: \"100%\",\n        height: \"160px\",\n        count: 20\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 16\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 7\n  }, this);\n};\n\n_s(SubscriptionsScreen, \"7zCEix5DxVBiM4SGTUPF1Xv8law=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = SubscriptionsScreen;\nexport default SubscriptionsScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"SubscriptionsScreen\");","map":{"version":3,"sources":["/Users/uchennaibe/Desktop/youtube/src/screens/subscriptionsScreen/SubscriptionsScreen.js"],"names":["useEffect","Container","Skeleton","SkeletonTheme","useDispatch","useSelector","VideoHorizontal","getSubscribedChannels","SubscriptionsScreen","dispatch","loading","videos","state","subscriptionsChannel","map","video","id"],"mappings":";;;;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,SAAT,QAA0B,iBAA1B;AACA,OAAOC,QAAP,IAAmBC,aAAnB,QAAwC,wBAAxC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,eAAP,MAA4B,kDAA5B;AACA,SAASC,qBAAT,QAAsC,mCAAtC;AACA,OAAO,sBAAP;;AAEA,MAAMC,mBAAmB,GAAG,MAAM;AAAA;;AAC/B,QAAMC,QAAQ,GAAGL,WAAW,EAA5B;AAEAJ,EAAAA,SAAS,CAAC,MAAM;AACbS,IAAAA,QAAQ,CAACF,qBAAqB,EAAtB,CAAR;AACF,GAFQ,EAEN,CAACE,QAAD,CAFM,CAAT;AAIA,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAsBN,WAAW,CAACO,KAAK,IAAIA,KAAK,CAACC,oBAAhB,CAAvC;AAEA,sBACG,QAAC,SAAD;AAAW,IAAA,KAAK,MAAhB;AAAA,cACI,CAACH,OAAD,GACEC,MADF,aACEA,MADF,uBACEA,MAAM,CAAEG,GAAR,CAAYC,KAAK,iBACd,QAAC,eAAD;AAAiB,MAAA,KAAK,EAAEA,KAAxB;AAA8C,MAAA,SAAS;AAAvD,OAAoCA,KAAK,CAACC,EAA1C;AAAA;AAAA;AAAA;AAAA,YADH,CADF,gBAKE,QAAC,aAAD;AAAe,MAAA,KAAK,EAAC,SAArB;AAA+B,MAAA,cAAc,EAAC,SAA9C;AAAA,6BACG,QAAC,QAAD;AAAU,QAAA,KAAK,EAAC,MAAhB;AAAuB,QAAA,MAAM,EAAC,OAA9B;AAAsC,QAAA,KAAK,EAAE;AAA7C;AAAA;AAAA;AAAA;AAAA;AADH;AAAA;AAAA;AAAA;AAAA;AANN;AAAA;AAAA;AAAA;AAAA,UADH;AAaF,CAtBD;;GAAMR,mB;UACcJ,W,EAMWC,W;;;KAPzBG,mB;AAwBN,eAAeA,mBAAf","sourcesContent":["import { useEffect } from 'react'\nimport { Container } from 'react-bootstrap'\nimport Skeleton, { SkeletonTheme } from 'react-loading-skeleton'\nimport { useDispatch, useSelector } from 'react-redux'\nimport VideoHorizontal from '../../components/videoHorizontal/VideoHorizontal'\nimport { getSubscribedChannels } from '../../redux/actions/videos.action'\nimport './subscriptions.scss'\n\nconst SubscriptionsScreen = () => {\n   const dispatch = useDispatch()\n\n   useEffect(() => {\n      dispatch(getSubscribedChannels())\n   }, [dispatch])\n\n   const { loading, videos } = useSelector(state => state.subscriptionsChannel)\n\n   return (\n      <Container fluid>\n         {!loading ? (\n            videos?.map(video => (\n               <VideoHorizontal video={video} key={video.id} subScreen />\n            ))\n         ) : (\n            <SkeletonTheme color='#343a40' highlightColor='#3c4147'>\n               <Skeleton width='100%' height='160px' count={20} />\n            </SkeletonTheme>\n         )}\n      </Container>\n   )\n}\n\nexport default SubscriptionsScreen\n"]},"metadata":{},"sourceType":"module"}