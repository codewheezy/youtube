{"ast":null,"code":"import _regeneratorRuntime from\"/Users/uchennaibe/Desktop/youtube/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/uchennaibe/Desktop/youtube/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{CHANNEL_DETAILS_FAIL,CHANNEL_VIDEOS_REQUEST,CHANNEL_VIDEOS_SUCCESS,HOME_VIDEOS_FAIL,HOME_VIDEOS_REQUEST,HOME_VIDEOS_SUCCESS,RELATED_VIDEO_FAIL,RELATED_VIDEO_REQUEST,RELATED_VIDEO_SUCCESS,SEARCHED_VIDEO_FAIL,SEARCHED_VIDEO_REQUEST,SEARCHED_VIDEO_SUCCESS,SELECTED_VIDEO_FAIL,SELECTED_VIDEO_REQUEST,SELECTED_VIDEO_SUCCESS,SUBSCRIPTIONS_CHANNEL_FAIL,SUBSCRIPTIONS_CHANNEL_REQUEST,SUBSCRIPTIONS_CHANNEL_SUCCESS}from'../actionType';import request from'../../api';export var getPopularVideos=function getPopularVideos(){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch,getState){var _yield$request,data;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;dispatch({type:HOME_VIDEOS_REQUEST});_context.next=4;return request('/videos',{params:{part:'snippet,contentDetails,statistics',chart:'mostPopular',regionCode:'IN',maxResults:20,pageToken:getState().homeVideos.nextPageToken}});case 4:_yield$request=_context.sent;data=_yield$request.data;dispatch({type:HOME_VIDEOS_SUCCESS,payload:{videos:data.items,nextPageToken:data.nextPageToken,category:'All'}});_context.next=13;break;case 9:_context.prev=9;_context.t0=_context[\"catch\"](0);console.log(_context.t0.message);dispatch({type:HOME_VIDEOS_FAIL,payload:_context.t0.message});case 13:case\"end\":return _context.stop();}}},_callee,null,[[0,9]]);}));return function(_x,_x2){return _ref.apply(this,arguments);};}();};export var getVideosByCategory=function getVideosByCategory(keyword){return/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch,getState){var _yield$request2,data;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;dispatch({type:HOME_VIDEOS_REQUEST});_context2.next=4;return request('/search',{params:{part:'snippet',maxResults:20,pageToken:getState().homeVideos.nextPageToken,q:keyword,type:'video'}});case 4:_yield$request2=_context2.sent;data=_yield$request2.data;dispatch({type:HOME_VIDEOS_SUCCESS,payload:{videos:data.items,nextPageToken:data.nextPageToken,category:keyword}});_context2.next=13;break;case 9:_context2.prev=9;_context2.t0=_context2[\"catch\"](0);console.log(_context2.t0.message);dispatch({type:HOME_VIDEOS_FAIL,payload:_context2.t0.message});case 13:case\"end\":return _context2.stop();}}},_callee2,null,[[0,9]]);}));return function(_x3,_x4){return _ref2.apply(this,arguments);};}();};export var getVideoById=function getVideoById(id){return/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch){var _yield$request3,data;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.prev=0;dispatch({type:SELECTED_VIDEO_REQUEST});_context3.next=4;return request('/videos',{params:{part:'snippet,statistics',id:id}});case 4:_yield$request3=_context3.sent;data=_yield$request3.data;dispatch({type:SELECTED_VIDEO_SUCCESS,payload:data.items[0]});_context3.next=13;break;case 9:_context3.prev=9;_context3.t0=_context3[\"catch\"](0);console.log(_context3.t0.message);dispatch({type:SELECTED_VIDEO_FAIL,payload:_context3.t0.message});case 13:case\"end\":return _context3.stop();}}},_callee3,null,[[0,9]]);}));return function(_x5){return _ref3.apply(this,arguments);};}();};export var getRelatedVideos=function getRelatedVideos(id){return/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(dispatch){var _yield$request4,data;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.prev=0;dispatch({type:RELATED_VIDEO_REQUEST});_context4.next=4;return request('/search',{params:{part:'snippet',relatedToVideoId:id,maxResults:15,type:'video'}});case 4:_yield$request4=_context4.sent;data=_yield$request4.data;dispatch({type:RELATED_VIDEO_SUCCESS,payload:data.items});_context4.next=13;break;case 9:_context4.prev=9;_context4.t0=_context4[\"catch\"](0);console.log(_context4.t0.response.data.message);dispatch({type:RELATED_VIDEO_FAIL,payload:_context4.t0.response.data.message});case 13:case\"end\":return _context4.stop();}}},_callee4,null,[[0,9]]);}));return function(_x6){return _ref4.apply(this,arguments);};}();};export var getVideosBySearch=function getVideosBySearch(keyword){return/*#__PURE__*/function(){var _ref5=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(dispatch){var _yield$request5,data;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:_context5.prev=0;dispatch({type:SEARCHED_VIDEO_REQUEST});_context5.next=4;return request('/search',{params:{part:'snippet',maxResults:20,q:keyword,type:'video,channel'}});case 4:_yield$request5=_context5.sent;data=_yield$request5.data;dispatch({type:SEARCHED_VIDEO_SUCCESS,payload:data.items});_context5.next=13;break;case 9:_context5.prev=9;_context5.t0=_context5[\"catch\"](0);console.log(_context5.t0.message);dispatch({type:SEARCHED_VIDEO_FAIL,payload:_context5.t0.message});case 13:case\"end\":return _context5.stop();}}},_callee5,null,[[0,9]]);}));return function(_x7){return _ref5.apply(this,arguments);};}();};export var getSubscribedChannels=function getSubscribedChannels(){return/*#__PURE__*/function(){var _ref6=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(dispatch,getState){var _yield$request6,data;return _regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:_context6.prev=0;dispatch({type:SUBSCRIPTIONS_CHANNEL_REQUEST});_context6.next=4;return request('/subscriptions',{params:{part:'snippet,contentDetails',mine:true},headers:{Authorization:\"Bearer \".concat(getState().auth.accessToken)}});case 4:_yield$request6=_context6.sent;data=_yield$request6.data;dispatch({type:SUBSCRIPTIONS_CHANNEL_SUCCESS,payload:data.items});_context6.next=13;break;case 9:_context6.prev=9;_context6.t0=_context6[\"catch\"](0);console.log(_context6.t0.response.data);dispatch({type:SUBSCRIPTIONS_CHANNEL_FAIL,payload:_context6.t0.response.data});case 13:case\"end\":return _context6.stop();}}},_callee6,null,[[0,9]]);}));return function(_x8,_x9){return _ref6.apply(this,arguments);};}();};export var getVideosByChannel=function getVideosByChannel(id){return/*#__PURE__*/function(){var _ref7=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(dispatch){var _yield$request7,items,uploadPlaylistId,_yield$request8,data;return _regeneratorRuntime.wrap(function _callee7$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:_context7.prev=0;dispatch({type:CHANNEL_VIDEOS_REQUEST});// 1. get upload playlist id\n_context7.next=4;return request('/channels',{params:{part:'contentDetails',id:id}});case 4:_yield$request7=_context7.sent;items=_yield$request7.data.items;uploadPlaylistId=items[0].contentDetails.relatedPlaylists.uploads;// 2. get the videos using the id\n_context7.next=9;return request('/playlistItems',{params:{part:'snippet,contentDetails',playlistId:uploadPlaylistId,maxResults:30}});case 9:_yield$request8=_context7.sent;data=_yield$request8.data;dispatch({type:CHANNEL_VIDEOS_SUCCESS,payload:data.items});_context7.next=18;break;case 14:_context7.prev=14;_context7.t0=_context7[\"catch\"](0);console.log(_context7.t0.response.data.message);dispatch({type:CHANNEL_DETAILS_FAIL,payload:_context7.t0.response.data});case 18:case\"end\":return _context7.stop();}}},_callee7,null,[[0,14]]);}));return function(_x10){return _ref7.apply(this,arguments);};}();};","map":{"version":3,"sources":["/Users/uchennaibe/Desktop/youtube/src/redux/actions/videos.action.js"],"names":["CHANNEL_DETAILS_FAIL","CHANNEL_VIDEOS_REQUEST","CHANNEL_VIDEOS_SUCCESS","HOME_VIDEOS_FAIL","HOME_VIDEOS_REQUEST","HOME_VIDEOS_SUCCESS","RELATED_VIDEO_FAIL","RELATED_VIDEO_REQUEST","RELATED_VIDEO_SUCCESS","SEARCHED_VIDEO_FAIL","SEARCHED_VIDEO_REQUEST","SEARCHED_VIDEO_SUCCESS","SELECTED_VIDEO_FAIL","SELECTED_VIDEO_REQUEST","SELECTED_VIDEO_SUCCESS","SUBSCRIPTIONS_CHANNEL_FAIL","SUBSCRIPTIONS_CHANNEL_REQUEST","SUBSCRIPTIONS_CHANNEL_SUCCESS","request","getPopularVideos","dispatch","getState","type","params","part","chart","regionCode","maxResults","pageToken","homeVideos","nextPageToken","data","payload","videos","items","category","console","log","message","getVideosByCategory","keyword","q","getVideoById","id","getRelatedVideos","relatedToVideoId","response","getVideosBySearch","getSubscribedChannels","mine","headers","Authorization","auth","accessToken","getVideosByChannel","uploadPlaylistId","contentDetails","relatedPlaylists","uploads","playlistId"],"mappings":"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","sourcesContent":["import {\n   CHANNEL_DETAILS_FAIL,\n   CHANNEL_VIDEOS_REQUEST,\n   CHANNEL_VIDEOS_SUCCESS,\n   HOME_VIDEOS_FAIL,\n   HOME_VIDEOS_REQUEST,\n   HOME_VIDEOS_SUCCESS,\n   RELATED_VIDEO_FAIL,\n   RELATED_VIDEO_REQUEST,\n   RELATED_VIDEO_SUCCESS,\n   SEARCHED_VIDEO_FAIL,\n   SEARCHED_VIDEO_REQUEST,\n   SEARCHED_VIDEO_SUCCESS,\n   SELECTED_VIDEO_FAIL,\n   SELECTED_VIDEO_REQUEST,\n   SELECTED_VIDEO_SUCCESS,\n   SUBSCRIPTIONS_CHANNEL_FAIL,\n   SUBSCRIPTIONS_CHANNEL_REQUEST,\n   SUBSCRIPTIONS_CHANNEL_SUCCESS,\n} from '../actionType'\n\nimport request from '../../api'\n\nexport const getPopularVideos = () => async (dispatch, getState) => {\n   try {\n      dispatch({\n         type: HOME_VIDEOS_REQUEST,\n      })\n      const { data } = await request('/videos', {\n         params: {\n            part: 'snippet,contentDetails,statistics',\n            chart: 'mostPopular',\n            regionCode: 'IN',\n            maxResults: 20,\n            pageToken: getState().homeVideos.nextPageToken,\n         },\n      })\n\n      dispatch({\n         type: HOME_VIDEOS_SUCCESS,\n         payload: {\n            videos: data.items,\n            nextPageToken: data.nextPageToken,\n            category: 'All',\n         },\n      })\n   } catch (error) {\n      console.log(error.message)\n      dispatch({\n         type: HOME_VIDEOS_FAIL,\n         payload: error.message,\n      })\n   }\n}\n\nexport const getVideosByCategory = keyword => async (dispatch, getState) => {\n   try {\n      dispatch({\n         type: HOME_VIDEOS_REQUEST,\n      })\n      const { data } = await request('/search', {\n         params: {\n            part: 'snippet',\n\n            maxResults: 20,\n            pageToken: getState().homeVideos.nextPageToken,\n            q: keyword,\n            type: 'video',\n         },\n      })\n\n      dispatch({\n         type: HOME_VIDEOS_SUCCESS,\n         payload: {\n            videos: data.items,\n            nextPageToken: data.nextPageToken,\n            category: keyword,\n         },\n      })\n   } catch (error) {\n      console.log(error.message)\n      dispatch({\n         type: HOME_VIDEOS_FAIL,\n         payload: error.message,\n      })\n   }\n}\n\nexport const getVideoById = id => async dispatch => {\n   try {\n      dispatch({\n         type: SELECTED_VIDEO_REQUEST,\n      })\n\n      const { data } = await request('/videos', {\n         params: {\n            part: 'snippet,statistics',\n            id: id,\n         },\n      })\n      dispatch({\n         type: SELECTED_VIDEO_SUCCESS,\n         payload: data.items[0],\n      })\n   } catch (error) {\n      console.log(error.message)\n      dispatch({\n         type: SELECTED_VIDEO_FAIL,\n         payload: error.message,\n      })\n   }\n}\n\nexport const getRelatedVideos = id => async dispatch => {\n   try {\n      dispatch({\n         type: RELATED_VIDEO_REQUEST,\n      })\n\n      const { data } = await request('/search', {\n         params: {\n            part: 'snippet',\n            relatedToVideoId: id,\n            maxResults: 15,\n            type: 'video',\n         },\n      })\n      dispatch({\n         type: RELATED_VIDEO_SUCCESS,\n         payload: data.items,\n      })\n   } catch (error) {\n      console.log(error.response.data.message)\n      dispatch({\n         type: RELATED_VIDEO_FAIL,\n         payload: error.response.data.message,\n      })\n   }\n}\n\nexport const getVideosBySearch = keyword => async dispatch => {\n   try {\n      dispatch({\n         type: SEARCHED_VIDEO_REQUEST,\n      })\n      const { data } = await request('/search', {\n         params: {\n            part: 'snippet',\n\n            maxResults: 20,\n            q: keyword,\n            type: 'video,channel',\n         },\n      })\n\n      dispatch({\n         type: SEARCHED_VIDEO_SUCCESS,\n         payload: data.items,\n      })\n   } catch (error) {\n      console.log(error.message)\n      dispatch({\n         type: SEARCHED_VIDEO_FAIL,\n         payload: error.message,\n      })\n   }\n}\n\nexport const getSubscribedChannels = () => async (dispatch, getState) => {\n   try {\n      dispatch({\n         type: SUBSCRIPTIONS_CHANNEL_REQUEST,\n      })\n      const { data } = await request('/subscriptions', {\n         params: {\n            part: 'snippet,contentDetails',\n\n            mine: true,\n         },\n         headers: {\n            Authorization: `Bearer ${getState().auth.accessToken}`,\n         },\n      })\n      dispatch({\n         type: SUBSCRIPTIONS_CHANNEL_SUCCESS,\n         payload: data.items,\n      })\n   } catch (error) {\n      console.log(error.response.data)\n      dispatch({\n         type: SUBSCRIPTIONS_CHANNEL_FAIL,\n         payload: error.response.data,\n      })\n   }\n}\n\nexport const getVideosByChannel = id => async dispatch => {\n   try {\n      dispatch({\n         type: CHANNEL_VIDEOS_REQUEST,\n      })\n\n      // 1. get upload playlist id\n      const {\n         data: { items },\n      } = await request('/channels', {\n         params: {\n            part: 'contentDetails',\n            id: id,\n         },\n      })\n      const uploadPlaylistId = items[0].contentDetails.relatedPlaylists.uploads\n      // 2. get the videos using the id\n      const { data } = await request('/playlistItems', {\n         params: {\n            part: 'snippet,contentDetails',\n            playlistId: uploadPlaylistId,\n            maxResults: 30,\n         },\n      })\n\n      dispatch({\n         type: CHANNEL_VIDEOS_SUCCESS,\n         payload: data.items,\n      })\n   } catch (error) {\n      console.log(error.response.data.message)\n      dispatch({\n         type: CHANNEL_DETAILS_FAIL,\n         payload: error.response.data,\n      })\n   }\n}\n"]},"metadata":{},"sourceType":"module"}