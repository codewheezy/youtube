{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/uchennaibe/Downloads/youtube-clone-react-redux/src/components/video/Video.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './_video.scss';\nimport { AiFillEye } from 'react-icons/ai';\nimport request from '../../api';\nimport moment from 'moment';\nimport numeral from 'numeral';\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\nimport { useHistory } from 'react-router-dom';\n\nconst Video = ({\n  video,\n  channelScreen\n}) => {\n  _s();\n\n  const {\n    id,\n    snippet: {\n      channelId,\n      channelTitle,\n      title,\n      publishedAt,\n      thumbnails: {\n        medium\n      }\n    },\n    contentDetails\n  } = video;\n  const [views, setViews] = useState(null);\n  const [duration, setDuration] = useState(null);\n  const [channelIcon, setChannelIcon] = useState(null);\n  const seconds = moment.duration(duration).asSeconds();\n\n  const _duration = moment.utc(seconds * 1000).format('mm:ss');\n\n  const _videoId = (id === null || id === void 0 ? void 0 : id.videoId) || (contentDetails === null || contentDetails === void 0 ? void 0 : contentDetails.videoId) || id;\n\n  const history = useHistory();\n  useEffect(() => {\n    const get_video_details = async () => {\n      const {\n        data: {\n          items\n        }\n      } = await request('/videos', {\n        params: {\n          part: 'contentDetails,statistics',\n          id: _videoId\n        }\n      });\n      setDuration(items[0].contentDetails.duration);\n      setViews(items[0].statistics.viewCount);\n    };\n\n    get_video_details();\n  }, [_videoId]);\n  useEffect(() => {\n    const get_channel_icon = async () => {\n      const {\n        data: {\n          items\n        }\n      } = await request('/channels', {\n        params: {\n          part: 'snippet',\n          id: channelId\n        }\n      });\n      setChannelIcon(items[0].snippet.thumbnails.default);\n    };\n\n    get_channel_icon();\n  }, [channelId]);\n\n  const handleVideoClick = () => {\n    history.push(`/watch/${_videoId}`);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"video\",\n    onClick: handleVideoClick,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"video__top\",\n      children: [/*#__PURE__*/_jsxDEV(LazyLoadImage, {\n        src: medium.url,\n        effect: \"blur\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"video__top__duration\",\n        children: _duration\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"video__title\",\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"video__details\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: [/*#__PURE__*/_jsxDEV(AiFillEye, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 16\n        }, this), \" \", numeral(views).format('0.a'), \" Views \\u2022\", ' ']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }, this), ' ', /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\" \", moment(publishedAt).fromNow(), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 10\n    }, this), !channelScreen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"video__channel\",\n      children: [/*#__PURE__*/_jsxDEV(LazyLoadImage, {\n        src: channelIcon === null || channelIcon === void 0 ? void 0 : channelIcon.url,\n        effect: \"blur\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 16\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: channelTitle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 16\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 7\n  }, this);\n};\n\n_s(Video, \"kwf9fHlY9Fk4yqyU/zgHeu1x2YU=\", false, function () {\n  return [useHistory];\n});\n\n_c = Video;\nexport default Video;\n\nvar _c;\n\n$RefreshReg$(_c, \"Video\");","map":{"version":3,"sources":["/Users/uchennaibe/Downloads/youtube-clone-react-redux/src/components/video/Video.js"],"names":["React","useEffect","useState","AiFillEye","request","moment","numeral","LazyLoadImage","useHistory","Video","video","channelScreen","id","snippet","channelId","channelTitle","title","publishedAt","thumbnails","medium","contentDetails","views","setViews","duration","setDuration","channelIcon","setChannelIcon","seconds","asSeconds","_duration","utc","format","_videoId","videoId","history","get_video_details","data","items","params","part","statistics","viewCount","get_channel_icon","default","handleVideoClick","push","url","fromNow"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport './_video.scss'\n\nimport { AiFillEye } from 'react-icons/ai'\nimport request from '../../api'\n\nimport moment from 'moment'\nimport numeral from 'numeral'\nimport { LazyLoadImage } from 'react-lazy-load-image-component'\nimport { useHistory } from 'react-router-dom'\nconst Video = ({ video, channelScreen }) => {\n   const {\n      id,\n      snippet: {\n         channelId,\n         channelTitle,\n         title,\n         publishedAt,\n         thumbnails: { medium },\n      },\n      contentDetails,\n   } = video\n\n   const [views, setViews] = useState(null)\n   const [duration, setDuration] = useState(null)\n   const [channelIcon, setChannelIcon] = useState(null)\n\n   const seconds = moment.duration(duration).asSeconds()\n   const _duration = moment.utc(seconds * 1000).format('mm:ss')\n\n   const _videoId = id?.videoId || contentDetails?.videoId || id\n\n   const history = useHistory()\n\n   useEffect(() => {\n      const get_video_details = async () => {\n         const {\n            data: { items },\n         } = await request('/videos', {\n            params: {\n               part: 'contentDetails,statistics',\n               id: _videoId,\n            },\n         })\n         setDuration(items[0].contentDetails.duration)\n         setViews(items[0].statistics.viewCount)\n      }\n      get_video_details()\n   }, [_videoId])\n\n   useEffect(() => {\n      const get_channel_icon = async () => {\n         const {\n            data: { items },\n         } = await request('/channels', {\n            params: {\n               part: 'snippet',\n               id: channelId,\n            },\n         })\n         setChannelIcon(items[0].snippet.thumbnails.default)\n      }\n      get_channel_icon()\n   }, [channelId])\n\n   const handleVideoClick = () => {\n      history.push(`/watch/${_videoId}`)\n   }\n\n   return (\n      <div className='video' onClick={handleVideoClick}>\n         <div className='video__top'>\n            {/* <img src={medium.url} alt='' /> */}\n            <LazyLoadImage src={medium.url} effect='blur' />\n            <span className='video__top__duration'>{_duration}</span>\n         </div>\n         <div className='video__title'>{title}</div>\n         <div className='video__details'>\n            <span>\n               <AiFillEye /> {numeral(views).format('0.a')} Views •{' '}\n            </span>{' '}\n            <span> {moment(publishedAt).fromNow()} </span>\n         </div>\n         {!channelScreen && (\n            <div className='video__channel'>\n               <LazyLoadImage src={channelIcon?.url} effect='blur' />\n\n               <p>{channelTitle}</p>\n            </div>\n         )}\n      </div>\n   )\n}\n\nexport default Video\n"]},"metadata":{},"sourceType":"module"}