{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/uchennaibe/Downloads/youtube-clone-react-redux/src/screens/watchScreen/WatchScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { Col, Row } from 'react-bootstrap';\nimport Skeleton, { SkeletonTheme } from 'react-loading-skeleton';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport Comments from '../../components/comments/Comments';\nimport VideoHorizontal from '../../components/videoHorizontal/VideoHorizontal';\nimport VideoMetaData from '../../components/videoMetaData/VideoMetaData';\nimport { Helmet } from 'react-helmet';\nimport { getRelatedVideos, getVideoById } from '../../redux/actions/videos.action';\nimport './watchScreen.scss';\n\nconst WatchScreen = () => {\n  _s();\n\n  var _video$snippet, _video$snippet2, _video$statistics;\n\n  const {\n    id\n  } = useParams();\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getVideoById(id));\n    dispatch(getRelatedVideos(id));\n  }, [dispatch, id]);\n  const {\n    videos,\n    loading: relatedVideosLoading\n  } = useSelector(state => state.relatedVideos);\n  const {\n    video,\n    loading\n  } = useSelector(state => state.selectedVideo);\n  return /*#__PURE__*/_jsxDEV(Row, {\n    children: [/*#__PURE__*/_jsxDEV(Helmet, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: video === null || video === void 0 ? void 0 : (_video$snippet = video.snippet) === null || _video$snippet === void 0 ? void 0 : _video$snippet.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(Col, {\n      lg: 8,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"watchScreen__player\",\n        children: /*#__PURE__*/_jsxDEV(\"iframe\", {\n          src: `https://www.youtube.com/embed/${id}`,\n          frameBorder: \"0\",\n          title: video === null || video === void 0 ? void 0 : (_video$snippet2 = video.snippet) === null || _video$snippet2 === void 0 ? void 0 : _video$snippet2.title,\n          allowFullScreen: true,\n          width: \"100%\",\n          height: \"100%\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 16\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }, this), !loading ? /*#__PURE__*/_jsxDEV(VideoMetaData, {\n        video: video,\n        videoId: id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 16\n      }, this) : /*#__PURE__*/_jsxDEV(\"h6\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 16\n      }, this), /*#__PURE__*/_jsxDEV(Comments, {\n        videoId: id,\n        totalComments: video === null || video === void 0 ? void 0 : (_video$statistics = video.statistics) === null || _video$statistics === void 0 ? void 0 : _video$statistics.commentCount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(Col, {\n      lg: 4,\n      children: !loading ? videos === null || videos === void 0 ? void 0 : videos.filter(video => video.snippet).map(video => /*#__PURE__*/_jsxDEV(VideoHorizontal, {\n        video: video\n      }, video.id.videoId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 22\n      }, this)) : /*#__PURE__*/_jsxDEV(SkeletonTheme, {\n        color: \"#343a40\",\n        highlightColor: \"#3c4147\",\n        children: /*#__PURE__*/_jsxDEV(Skeleton, {\n          width: \"100%\",\n          height: \"130px\",\n          count: 15\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 16\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 7\n  }, this);\n};\n\n_s(WatchScreen, \"kYvdsPGFqQA2ByKx/K5fRnfzr98=\", false, function () {\n  return [useParams, useDispatch, useSelector, useSelector];\n});\n\n_c = WatchScreen;\nexport default WatchScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"WatchScreen\");","map":{"version":3,"sources":["/Users/uchennaibe/Downloads/youtube-clone-react-redux/src/screens/watchScreen/WatchScreen.js"],"names":["React","useEffect","Col","Row","Skeleton","SkeletonTheme","useDispatch","useSelector","useParams","Comments","VideoHorizontal","VideoMetaData","Helmet","getRelatedVideos","getVideoById","WatchScreen","id","dispatch","videos","loading","relatedVideosLoading","state","relatedVideos","video","selectedVideo","snippet","title","statistics","commentCount","filter","map","videoId"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,GAAT,EAAcC,GAAd,QAAyB,iBAAzB;AACA,OAAOC,QAAP,IAAmBC,aAAnB,QAAwC,wBAAxC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,OAAOC,QAAP,MAAqB,oCAArB;AACA,OAAOC,eAAP,MAA4B,kDAA5B;AACA,OAAOC,aAAP,MAA0B,8CAA1B;AACA,SAASC,MAAT,QAAuB,cAAvB;AACA,SACGC,gBADH,EAEGC,YAFH,QAGO,mCAHP;AAIA,OAAO,oBAAP;;AAEA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AAAA;;AACvB,QAAM;AAAEC,IAAAA;AAAF,MAASR,SAAS,EAAxB;AAEA,QAAMS,QAAQ,GAAGX,WAAW,EAA5B;AAEAL,EAAAA,SAAS,CAAC,MAAM;AACbgB,IAAAA,QAAQ,CAACH,YAAY,CAACE,EAAD,CAAb,CAAR;AAEAC,IAAAA,QAAQ,CAACJ,gBAAgB,CAACG,EAAD,CAAjB,CAAR;AACF,GAJQ,EAIN,CAACC,QAAD,EAAWD,EAAX,CAJM,CAAT;AAMA,QAAM;AAAEE,IAAAA,MAAF;AAAUC,IAAAA,OAAO,EAAEC;AAAnB,MAA4Cb,WAAW,CAC1Dc,KAAK,IAAIA,KAAK,CAACC,aAD2C,CAA7D;AAIA,QAAM;AAAEC,IAAAA,KAAF;AAASJ,IAAAA;AAAT,MAAqBZ,WAAW,CAACc,KAAK,IAAIA,KAAK,CAACG,aAAhB,CAAtC;AAEA,sBACG,QAAC,GAAD;AAAA,4BACG,QAAC,MAAD;AAAA,6BACG;AAAA,kBAAQD,KAAR,aAAQA,KAAR,yCAAQA,KAAK,CAAEE,OAAf,mDAAQ,eAAgBC;AAAxB;AAAA;AAAA;AAAA;AAAA;AADH;AAAA;AAAA;AAAA;AAAA,YADH,eAIG,QAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA,8BACG;AAAK,QAAA,SAAS,EAAC,qBAAf;AAAA,+BACG;AACG,UAAA,GAAG,EAAG,iCAAgCV,EAAG,EAD5C;AAEG,UAAA,WAAW,EAAC,GAFf;AAGG,UAAA,KAAK,EAAEO,KAAF,aAAEA,KAAF,0CAAEA,KAAK,CAAEE,OAAT,oDAAE,gBAAgBC,KAH1B;AAIG,UAAA,eAAe,MAJlB;AAKG,UAAA,KAAK,EAAC,MALT;AAMG,UAAA,MAAM,EAAC;AANV;AAAA;AAAA;AAAA;AAAA;AADH;AAAA;AAAA;AAAA;AAAA,cADH,EAUI,CAACP,OAAD,gBACE,QAAC,aAAD;AAAe,QAAA,KAAK,EAAEI,KAAtB;AAA6B,QAAA,OAAO,EAAEP;AAAtC;AAAA;AAAA;AAAA;AAAA,cADF,gBAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAbN,eAgBG,QAAC,QAAD;AACG,QAAA,OAAO,EAAEA,EADZ;AAEG,QAAA,aAAa,EAAEO,KAAF,aAAEA,KAAF,4CAAEA,KAAK,CAAEI,UAAT,sDAAE,kBAAmBC;AAFrC;AAAA;AAAA;AAAA;AAAA,cAhBH;AAAA;AAAA;AAAA;AAAA;AAAA,YAJH,eAyBG,QAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA,gBACI,CAACT,OAAD,GACED,MADF,aACEA,MADF,uBACEA,MAAM,CACDW,MADL,CACYN,KAAK,IAAIA,KAAK,CAACE,OAD3B,EAEIK,GAFJ,CAEQP,KAAK,iBACP,QAAC,eAAD;AAAiB,QAAA,KAAK,EAAEA;AAAxB,SAAoCA,KAAK,CAACP,EAAN,CAASe,OAA7C;AAAA;AAAA;AAAA;AAAA,cAHN,CADF,gBAOE,QAAC,aAAD;AAAe,QAAA,KAAK,EAAC,SAArB;AAA+B,QAAA,cAAc,EAAC,SAA9C;AAAA,+BACG,QAAC,QAAD;AAAU,UAAA,KAAK,EAAC,MAAhB;AAAuB,UAAA,MAAM,EAAC,OAA9B;AAAsC,UAAA,KAAK,EAAE;AAA7C;AAAA;AAAA;AAAA;AAAA;AADH;AAAA;AAAA;AAAA;AAAA;AARN;AAAA;AAAA;AAAA;AAAA,YAzBH;AAAA;AAAA;AAAA;AAAA;AAAA,UADH;AAyCF,CA1DD;;GAAMhB,W;UACYP,S,EAEEF,W,EAQiCC,W,EAIvBA,W;;;KAfxBQ,W;AA4DN,eAAeA,WAAf","sourcesContent":["import React, { useEffect } from 'react'\nimport { Col, Row } from 'react-bootstrap'\nimport Skeleton, { SkeletonTheme } from 'react-loading-skeleton'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useParams } from 'react-router-dom'\nimport Comments from '../../components/comments/Comments'\nimport VideoHorizontal from '../../components/videoHorizontal/VideoHorizontal'\nimport VideoMetaData from '../../components/videoMetaData/VideoMetaData'\nimport { Helmet } from 'react-helmet'\nimport {\n   getRelatedVideos,\n   getVideoById,\n} from '../../redux/actions/videos.action'\nimport './watchScreen.scss'\n\nconst WatchScreen = () => {\n   const { id } = useParams()\n\n   const dispatch = useDispatch()\n\n   useEffect(() => {\n      dispatch(getVideoById(id))\n\n      dispatch(getRelatedVideos(id))\n   }, [dispatch, id])\n\n   const { videos, loading: relatedVideosLoading } = useSelector(\n      state => state.relatedVideos\n   )\n\n   const { video, loading } = useSelector(state => state.selectedVideo)\n\n   return (\n      <Row>\n         <Helmet>\n            <title>{video?.snippet?.title}</title>\n         </Helmet>\n         <Col lg={8}>\n            <div className='watchScreen__player'>\n               <iframe\n                  src={`https://www.youtube.com/embed/${id}`}\n                  frameBorder='0'\n                  title={video?.snippet?.title}\n                  allowFullScreen\n                  width='100%'\n                  height='100%'></iframe>\n            </div>\n            {!loading ? (\n               <VideoMetaData video={video} videoId={id} />\n            ) : (\n               <h6>Loading...</h6>\n            )}\n\n            <Comments\n               videoId={id}\n               totalComments={video?.statistics?.commentCount}\n            />\n         </Col>\n         <Col lg={4}>\n            {!loading ? (\n               videos\n                  ?.filter(video => video.snippet)\n                  .map(video => (\n                     <VideoHorizontal video={video} key={video.id.videoId} />\n                  ))\n            ) : (\n               <SkeletonTheme color='#343a40' highlightColor='#3c4147'>\n                  <Skeleton width='100%' height='130px' count={15} />\n               </SkeletonTheme>\n            )}\n         </Col>\n      </Row>\n   )\n}\n\nexport default WatchScreen\n"]},"metadata":{},"sourceType":"module"}