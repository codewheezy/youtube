{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/uchennaibe/Desktop/youtube/src/screens/SearchScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { Container } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { getVideosBySearch } from '../redux/actions/videos.action';\nimport VideoHorizontal from '../components/videoHorizontal/VideoHorizontal';\nimport Skeleton, { SkeletonTheme } from 'react-loading-skeleton';\n\nconst SearchScreen = () => {\n  _s();\n\n  const {\n    query\n  } = useParams();\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getVideosBySearch(query));\n  }, [query, dispatch]);\n  const {\n    videos,\n    loading\n  } = useSelector(state => state.searchedVideos);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: !loading ? videos === null || videos === void 0 ? void 0 : videos.map(video => /*#__PURE__*/_jsxDEV(VideoHorizontal, {\n      video: video,\n      searchScreen: true\n    }, video.id.videoId, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 16\n    }, this)) : /*#__PURE__*/_jsxDEV(SkeletonTheme, {\n      color: \"#343a40\",\n      highlightColor: \"#3c4147\",\n      children: /*#__PURE__*/_jsxDEV(Skeleton, {\n        width: \"100%\",\n        height: \"160px\",\n        count: 20\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 16\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 7\n  }, this);\n};\n\n_s(SearchScreen, \"KpUrhn8lOGUwno11tWj2HpKJdj8=\", false, function () {\n  return [useParams, useDispatch, useSelector];\n});\n\n_c = SearchScreen;\nexport default SearchScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchScreen\");","map":{"version":3,"sources":["/Users/uchennaibe/Desktop/youtube/src/screens/SearchScreen.js"],"names":["React","useEffect","Container","useDispatch","useSelector","useParams","getVideosBySearch","VideoHorizontal","Skeleton","SkeletonTheme","SearchScreen","query","dispatch","videos","loading","state","searchedVideos","map","video","id","videoId"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,SAAT,QAA0B,iBAA1B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,OAAOC,eAAP,MAA4B,+CAA5B;AACA,OAAOC,QAAP,IAAmBC,aAAnB,QAAwC,wBAAxC;;AAEA,MAAMC,YAAY,GAAG,MAAM;AAAA;;AACxB,QAAM;AAAEC,IAAAA;AAAF,MAAYN,SAAS,EAA3B;AAEA,QAAMO,QAAQ,GAAGT,WAAW,EAA5B;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACbW,IAAAA,QAAQ,CAACN,iBAAiB,CAACK,KAAD,CAAlB,CAAR;AACF,GAFQ,EAEN,CAACA,KAAD,EAAQC,QAAR,CAFM,CAAT;AAIA,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAsBV,WAAW,CAACW,KAAK,IAAIA,KAAK,CAACC,cAAhB,CAAvC;AAEA,sBACG,QAAC,SAAD;AAAA,cACI,CAACF,OAAD,GACED,MADF,aACEA,MADF,uBACEA,MAAM,CAAEI,GAAR,CAAYC,KAAK,iBACd,QAAC,eAAD;AACG,MAAA,KAAK,EAAEA,KADV;AAGG,MAAA,YAAY;AAHf,OAEQA,KAAK,CAACC,EAAN,CAASC,OAFjB;AAAA;AAAA;AAAA;AAAA,YADH,CADF,gBASE,QAAC,aAAD;AAAe,MAAA,KAAK,EAAC,SAArB;AAA+B,MAAA,cAAc,EAAC,SAA9C;AAAA,6BACG,QAAC,QAAD;AAAU,QAAA,KAAK,EAAC,MAAhB;AAAuB,QAAA,MAAM,EAAC,OAA9B;AAAsC,QAAA,KAAK,EAAE;AAA7C;AAAA;AAAA;AAAA;AAAA;AADH;AAAA;AAAA;AAAA;AAAA;AAVN;AAAA;AAAA;AAAA;AAAA,UADH;AAiBF,CA5BD;;GAAMV,Y;UACeL,S,EAEDF,W,EAMWC,W;;;KATzBM,Y;AA8BN,eAAeA,YAAf","sourcesContent":["import React, { useEffect } from 'react'\nimport { Container } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useParams } from 'react-router-dom'\nimport { getVideosBySearch } from '../redux/actions/videos.action'\nimport VideoHorizontal from '../components/videoHorizontal/VideoHorizontal'\nimport Skeleton, { SkeletonTheme } from 'react-loading-skeleton'\n\nconst SearchScreen = () => {\n   const { query } = useParams()\n\n   const dispatch = useDispatch()\n\n   useEffect(() => {\n      dispatch(getVideosBySearch(query))\n   }, [query, dispatch])\n\n   const { videos, loading } = useSelector(state => state.searchedVideos)\n\n   return (\n      <Container>\n         {!loading ? (\n            videos?.map(video => (\n               <VideoHorizontal\n                  video={video}\n                  key={video.id.videoId}\n                  searchScreen\n               />\n            ))\n         ) : (\n            <SkeletonTheme color='#343a40' highlightColor='#3c4147'>\n               <Skeleton width='100%' height='160px' count={20} />\n            </SkeletonTheme>\n         )}\n      </Container>\n   )\n}\n\nexport default SearchScreen\n"]},"metadata":{},"sourceType":"module"}